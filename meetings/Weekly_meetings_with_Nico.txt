Weekly meetings with Nico:

Until further notice: Weekly meetings at Wednesday 1100.

5th Mar, 2015:
	To test my code:
		look in tests/types/function.c
			"test_build_lambda()":133
			"test_simple_lambda"
		look in tests/vsdg/test-phi.c
			tests/vsdg/phi-extension.c

	How can I check constant parameters?
		Each node has a reference to root_region
		Check operators/nullary.h, unary.h, and binary.h

	How can I find root_region() without passing it through as a parameter?

	New pull on master branch!
		Go to other computers:
			git checkout master && git branch -D inliner && git branch inliner \
				&& git pull inliner

	report:
		In general:
			remove "procedure" in the whole report.

		Introduction:
			"purpose of compilers are twofold:" vs "In broad terms"
			Add a paragraph for recursive functions. Read section 4.4 of the GHC
			paper for recursion unrolling! (See notes from Nico on Report)

		Background:
			Do not mention other nodes when discussing the apply node. Say things like "the same arity and order of inputs as the function the apply node represents" and "the first input of the apply node is a link to the funciton the apply node represents a call to".
			Theta-node:
				Semantics of the theta node (remember to tell about the loop variant-variables!!!).
				Replace example with a factorial example.
				Kick out state edges for now.
			Introduce internal/external inputs and outputs earlier in the background section than @ phi-nodes.


12th Feb, 2015:
	Inliner abstract class
		With conditional classes inheriting from this class.

	Work duplcation is not an issue for us, or normally.
		It's the GHC intermediate presentation whose modules mess it up
		due to laziness being made eager. (slightly confused about this)

	Report:
		List of figures and listings (and more) on a page each @ end of document.
		Don't say above/below in Latex, use "as shown as", don't say anything else.
		Throw out work duplication.
		Stop putting things side by side, at least as minipages, make a figure in inkscape and give them common caption.
		Re-phrase black magic into black art, see what GHC paper wrote.
		Kick out sentence about
		Research word manifold.
		State things more carefully!!!
		Stop thinking introduction should be understandable for laymen.
		See photo on cellphone for shorter code duplication example.
		Completely rephrase recursive functions paragraph in introduction
		Describe the project, not the report.
		Put new words in italics.
		Re-do the introduction of the assignment. Try again.

		Remember to mention arity and order of arguments for nodes in background!
		Make switch case example, nested can be left as exercise for the reader.


4th Feb, 2015:

	Too much "bullshit code" Remember that work duplication depends upon the
inlined function being pure, otherwise it will be assumed state dependent by
the RVSDG. State dependent function calls can have work duplication, if they
are not, you can use CSE.

	Fluffy introduction, can be done better.
	"No results were reportd."

28th Jan, 2015:
	Replace proposition with hypothesis

	Related work:
		Proposal, how they do it, results.
		Add the introduction to this section (see todo)
		GHC: "present an inliner"

	Introduction:
		Don't jump straight into inlining, introduce what inlining is.
		"with its body"
		Insert examples after the first paragraph.
		backend compilers don't exist, its compiler backend.

	Background:
		Look at the midterm representation, and using the graph to show how
Jive works overview
		Stop with "typically common".
		Hyphen between nodes.


	RVSDG:
		State dependency edges
			Show order of operations when you have two sub-graphs whith with no
dependencies.
		data dependendcy edges
			Straightforward
		Complex nodes are regions
		Remember to talk about arity.
		Strictness is enforced by the semantics of the RVSDG, not the RVSDG itself

	Make lots of graphs and visual examples!


23rd Jan, 2015:
	Background:
		RVSDG: is a DAG nodes represent operations edges .
		Have som examples in there as well: Fibonacci in C!
		Call gamma blocks for nodes.
		Re-state the assignment: Inlining -> easy, what is it. Benefits/drawbacks
			This paper details the problem and benefits of inlining.
		Introduce Jive a few sentences, say that its further introduced in section 2

	Next week:
		Kick out the two-coloumn thingy.
			Use documentclass article.
		Write background
		Paper research
		Think about architecture of an inliner

	Feedback on current report:
		Remove first paragraph.
			RVSDG has to do with data dependency, but not data movement!
				Fix this misunderstanding.
		Remove the phrase "when inlining"
		The contribution is an inliner for the Jive compiler (add footnote)
		RSVDG is a new IR representation! DO NOT MENTION CFG in INTRODUCTION.
		Programflow: nonsensical, use dataflow or controlflow
		RVSDG shows explictly dataflow.

		Stop doing the how/when to!!!
		Remember CNF paranthesis!!! when first used.
		"execution time improvement of"
		Re-write [2] acyclic term thingy to something readers of my paper will understand.
		Strictness analysis has nothing to do with inlining, remove!!

	RVSDG:
		CALL NODES ARE IMPORTANT! They show where functions are called, for example where one function calls another, then the first has a call (apply) node inside of itself linking to the called function.

	Move Related work to before conclusion, but after scheme/results.
		Remember not to use unexplained terms or references from/used in related
work earlier in the report!!!


14th Jan, 2015:
	Kick out:
		Building a supercompiler
		Optimizing generics is easy
		Bigloo compiler
			Not so relevant.
		Losing functions without Gaining Data

	No extensions on paper; hard deadline end of May.

	Short high-level summaries of papers in the read papers list.
	Think shortened abstract.
		Re-do the ones already written.

	Problemsetting comes before introduction.
		Write problem setting inside introduciton
		Add problemset (/"assignment") pdf from Nico in the appendix

	Start writing background into paper as its own section, after introduction
		Write about the RVSDG!!! (In this section, its own subsections)

	Basic architecture of an inliner
		How to take care of recursive functions
		Inline recursive function until a certain depth.
		Or use the GHC strongly component strategy

	Need to decide which properties to use to decide when to inline the recursive
functions.

	Jive compiler:
		Phi region/block is the one entails each  mutually recursive binding
groups.
		Phi is a mutually recursive environment
		Lambda is a function
		Gamma is conditional
		Theta is loop construct

	Related work preferably finished end of january
	Backrgound preferably finished by middle of february

	Remove personal stuff from report. Keep only what should stay in the final
version of the report.

	Code:
		First look at the recursive functions
			Return which lambdas you can inline and which you cannot
		Those you can inline: move onto the architecture.
		Inline literal, class
		abstract function bool performInline(Apply node) = 0;

	Relevant:
		Should potential loop optimizations
		Region based compilation has section with references to relevant papers
			Section 3: references 3 & 4! (Not alot relevant in the rest of the
paper, but a little bit here and there.)
		Static Unrolling Recursion to Improve Opportunities for Parallelism
		Adaptive compilations and inlining
		Rest of papers: all interesting

Next to read:
	Adaptive compilation to read next


7th Jan, 2015:
	Read: Skim through book on programming languages, parts of Nico's master
thesis
	Read more papers.
	Write background into related work.
